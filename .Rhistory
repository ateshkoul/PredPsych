limits <- aes(ymax = meanAcc + SEAcc, ymin=meanAcc - SEAcc)
p2 <- ggplot(ResultsPourPlace[ResultsPourPlace$intention=="Place",],aes(y=meanAcc,x=cluster))
limits <- aes(ymax = meanAcc + SEAcc, ymin=meanAcc - SEAcc)
p2 <- p2 + geom_bar(stat="identity",position= 'dodge',fill='darkred')  +
# Pour intention
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
SEAcc = sd(meanSubAcc)/sqrt(length(meanSubAcc)),SERT = sd(meanSubRT)/sqrt(length(meanSubRT)),
intention=unique(intention))
# Accuracy
limits <- aes(ymax = meanAcc + SEAcc, ymin=meanAcc - SEAcc)
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
limits <- aes(ymax = meanAcc + SEAcc, ymin=meanAcc - SEAcc)
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
# RT
fileName <-  "D:\\IIT\\Paper_writing\\strategies\\SubmissionPLosOne\\ReSubmission2\\SupportingData.xlsx"
DataPourPlace <- read.xlsx(fileName,sheet = 3,cols=1:8)
DataPourPlace$rt <- as.double(DataPourPlace$rt)
SubResults <- ddply(DataPourPlace,.(subj_idx,cluster),summarise,meanSubAcc = mean(accuracy),meanSubRT = mean(rt,na.rm=T),intention=unique(intention))
ResultsPourPlace <- ddply(SubResults,.(cluster),summarise,meanAcc = mean(meanSubAcc),meanRT= mean(meanSubRT),
SEAcc = sd(meanSubAcc)/sqrt(length(meanSubAcc)),SERT = sd(meanSubRT)/sqrt(length(meanSubRT)),
intention=unique(intention))
# Accuracy
# Pour intention
p1 <- ggplot(ResultsPourPlace[ResultsPourPlace$intention=="Pour",],aes(y=meanAcc,x=cluster))
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
print("Generating Random Forest Tree")
# remove NAs as I use a stratified cross validation (may not be necessary)
DatNoNA <- Data[!is.na(Data[,responseCol]),]
# Just to be sure that the response is a factor for classification
DatNoNA[,responseCol] <- factor(DatNoNA[,responseCol])
modelRF <- randomForest(as.formula(paste(responseColName,"~",paste0(featureColNames,collapse = "+"))),data=DatNoNA[,selectedCol])
print(modelRF) # view results
# importance of each predictor
print(importance(modelRF))
print('done')
return(modelRF)}
)
}
