{
    "collab_server" : "",
    "contents" : "#' Generic Classification and Regression Tree Function\n#' \n#'\n#' A simple function to create Classification and Regression Trees\n#' \n#' @param Data         (dataframe) a data frame with regressors and response\n#' @param responseCol  (numeric) which column should be used as response col\n#' @param selectedCol  (optional)(numeric) which columns should be treated as data(features + response) (defaults to all columns)\n#' @param tree         which cart model to implement; One of the following values:\n#'      \\itemize{\n#'      \\item modelF  =   Full Model Tree; \n#'      \\item modelNAHF = Crossvalidated Half Model Tree removing missing values;\n#'      \\item modelHF =   Crossvalidated Half Model Tree With missing values;\n#'      \\item modelCF =   Conditional inference framework Tree;\n#'      \\item modelRF =   Random Forest Tree;    \n#'      }\n#'          \n#' @return  Cart model result for the input tree \\code{Results}  \n#'\n#'@author\n#'Atesh Koul, C'MON group, Istituto Italiano di technologia\n#'\n#'\\email{atesh.koul@@gmail.com}\nCartModel <- function(Data,responseCol,selectedCol,tree,...){\n\n  \n  \n  \n  library(caret)\n\n  # if nothing specific is provided, default to all the columns\n  if(missing(selectedCol))  selectedCol <- 1:length(names(Data))\n  # get the features\n  selectedColNames <- names(Data)[selectedCol]\n  # get feature columns without response\n  featureColNames <- selectedColNames[-grep(names(Data)[responseCol],selectedColNames)]\n  responseColName <- names(Data)[responseCol]\n\n  # make it a factor anyways\n  Data[,responseCol] <- factor(Data[,responseCol])\n\n  switch(tree,\n         modelF = {\n           library(rpart)\n           print(\"Generating Full Model Tree\")\n           # Full tree\n           modelF <- rpart(as.formula(paste(responseColName,\"~\",paste0(featureColNames,collapse = \"+\"))),data=Data[,selectedCol],method = 'class')  \n           #summary(modelF)\n           plotcp(modelF)\n           # plot tree\n           plot(modelF, uniform=TRUE,main=\"Classification Tree\")\n           text(modelF, use.n=TRUE, all=TRUE, cex=.8)\n           print(modelF)\n           print('done')\n           return(modelF)},\n         \n           modelNAHF = {\n             library(rpart)\n             print(\"Generating crossvalidated Half Model Tree NO NA\")\n             # remove NAs as I use a stratified cross validation (may not be necessary)\n             DatNoNA <- Data[!is.na(Data[,responseCol]),]\n             # Just to be sure that the response is a factor for classification\n             DatNoNA[,responseCol] <- factor(DatNoNA[,responseCol])\n\n              # optional scaling\n              # takes care if u input negative values also\n              # usedColNames <- names(Data)[selectedCol]\n              # ActualselectedCol <- usedColNames[-grep(names(Data)[responseCol],usedColNames)]\n              # DatNoNA[,ActualselectedCol] <- scale(DatNoNA[,ActualselectedCol])\n            \n              # just divide as test and train if u want\n              k = 2\n              # use stratified cross validation instead\n              # use 50% data for training\n              trainIndex <- createFolds(DatNoNA[,responseCol],list = FALSE,k=k)\n              trainX <- DatNoNA[trainIndex==1,]\n              testX <- DatNoNA[!trainIndex==2,]\n              modelNAHF <- rpart(as.formula(paste(responseColName,\"~\",paste0(featureColNames,collapse = \"+\"))),data=trainX[,selectedCol],method = 'class')\n              preDicNAHF <- predict(modelNAHF,testX,type='matrix')\n              summary(modelNAHF)\n              plot(modelNAHF, uniform=TRUE,\n                         main=\"Classification Tree HF\")\n              text(modelNAHF, use.n=TRUE, all=TRUE, cex=.8)\n              print(modelNAHF)\n              print('done')\n              return(modelNAHF)},\n         modelHF = {\n           library(rpart)\n           print(\"Generating crossvalidated Half Model Tree With NA\")\n           # just divide as test and train if u want\n            k = 2\n            trainIndex <- createFolds(Data[,responseCol],list = FALSE,k=k)\n            trainX <- Data[trainIndex==1,]\n            testX <- Data[!trainIndex==2,]\n            modelHF <- rpart(as.formula(paste(responseColName,\"~\",paste0(featureColNames,collapse = \"+\"))),data=trainX[,selectedCol],method = 'class')\n            preDicHF <- predict(modelHF,testX,type='matrix')\n            #summary(modelHF)\n            print(modelHF)\n            print('done')\n            return(modelHF)},\n         modelCF = {# Cluster tree\n           library(party)\n           print(\"Generating conditional inference framework Tree\")\n           # remove NAs as I use a stratified cross validation (may not be necessary)\n           DatNoNA <- Data[!is.na(Data[,responseCol]),]\n           # Just to be sure that the response is a factor for classification\n           DatNoNA[,responseCol] <- factor(DatNoNA[,responseCol])\n           modelCF <- ctree(as.formula(paste(responseColName,\"~\",paste0(featureColNames,collapse = \"+\"))),data=DatNoNA[,selectedCol])\n           #summary(modelCF)\n           plot(modelCF)\n           print(modelCF)\n           print('done')\n           return(modelCF)},\n         modelRF = {  # Random forest\n           library(randomForest)\n            print(\"Generating Random Forest Tree\")\n           # remove NAs as I use a stratified cross validation (may not be necessary)\n           DatNoNA <- Data[!is.na(Data[,responseCol]),]\n           # Just to be sure that the response is a factor for classification\n           DatNoNA[,responseCol] <- factor(DatNoNA[,responseCol])\n           modelRF <- randomForest(as.formula(paste(responseColName,\"~\",paste0(featureColNames,collapse = \"+\"))),data=DatNoNA[,selectedCol])\n           print(modelRF) # view results\n           # importance of each predictor\n           print(importance(modelRF)) \n           print('done')\n           return(modelRF)}\n  )\n}\n",
    "created" : 1469535249126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "506704967",
    "id" : "F25FBA15",
    "lastKnownWriteTime" : 1469544408,
    "last_content_update" : 1469544408822,
    "path" : "D:/SVNWorkingDir/CMON/ReadingIntention/CommonScripts/PredPsych/R/CartModel.R",
    "project_path" : "R/CartModel.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}